開け！ドメイン駆動設計の扉
GMO Masanobu Naruse

DDDの目的
why?
 UserClassを見るだけで、仕様がわかる
　UserClassのコンストラクタで制約チェックを入れたりする。
　　（文字数チェックとかNullチェックとか）
 
ソフトウェアにとって役に立つものを抽象化したものがモデル

ドメインの概念とドメインの関係を構築することが重要

ドメインエキスパート
 →業務を知っている人

・アクセルを踏むと進める
・荷物を運べる

→これのどちらが重要か判断することができる人（ドメインエキスパート）が重要

ドメインエキスパートでも理解できていないものがある。
これは開発者が構築すべきもの
つまり `ユビキタス言語`
互いへの理解はソフトウェアの未来を作る


IDによって識別されるものがEntity
それ以外はValueObject
 →（それ以外というのはちょっと認識が違うけどざっくり）

物流拠点クラスが輸送記録とかとる？
違和感あるよね？じゃあどうするか。
サービスクラスで実現する。


ドメインモデル貧血症
　→本来ドメインに記載するべきロジックをサービスに持って行ってしまうこと


主なサービス 3種類
・ドメインサービス
・アプリケーションサービス
・インフラストラクチャサービス

不変条件を守る
自動車にはタイヤが4つある

自動車のタイヤ交換ロジックを remove / add だとaddを忘れてしまう可能性がある
交換メソッドを用意すれば良い。
　→集約ルート
 集約は変更の単位でありトランザクションの単位。なるべく小さくする

ファクトリ
　・使う知識　
　・作る知識
違うよね？という観点で作成

隔離する
　・アーキテクチャ
　　→これはクリーンアーキテクチャとかの話になる

アーキテクチャをうまく使うことで、ドメインを隔離してわかりやすくすることができる。

DDDとは
ソフトウェアの対象領域をよく観察してうまく表現する


2月に本発売する！
