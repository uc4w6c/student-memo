マイクロサービス4つの分割アプローチ
ギルドワークス　増田

・クラウド、コンテナ、設計スキル
　→クラウド、コンテナだけでは前提がそろっただけ
　今回は設計スキルに関してのみ


負荷分散、リスク分散、データ分散（DBを分割して、参照するDBを変更するだけのアプリケーション）
今回は機能分散のみ

レートマジョリティ（枯れた技術でプロダクションコードはやりたい）

モノリスでモジュール設計の改善->マイクロサービスの可能性を検討->移行を検討
→最初からマイクロサービスありきではない

設計の基本は同じ
　・関心の分離
　・疎結合
　・モジュール化

マイクロサービス化することで今までは同期処理が中心だったが、非同期も考えなきゃいけない。

設計経験が低い人がいきなりマイクロサービス化できるか
　→できないだろう。最初は大きい範囲から経験をつみつつ小さくという話ならいけるかも。

モノリスであれば、論理的なモジュール分割を積極的にやるべき！
　→マイクロサービスにしたときにそれがわかっていないと辛いだけ

4種類の分割手法
ビジネスファンクション
　→
　→ただし必ずしも人が行なっている業務の分割がシステムの分割として良いかは微妙（デメリットの部分）


ユースケース
　動詞単位で管理
　モノリスでも伝統的なやり方。
　→サービス間でロジックの重複、断片化が起きやすい。

リソース
　名詞ごとに管理
  RDBでは当たり前の考え方
　→異なる関心ごとが混在し、肥大化しがち（顧客管理テーブルのカラムが増える）

　
